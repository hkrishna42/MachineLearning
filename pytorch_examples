{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e7db6228",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-06-29T14:20:39.026624Z",
     "iopub.status.busy": "2025-06-29T14:20:39.026306Z",
     "iopub.status.idle": "2025-06-29T14:20:46.472272Z",
     "shell.execute_reply": "2025-06-29T14:20:46.471455Z"
    },
    "papermill": {
     "duration": 7.452043,
     "end_time": "2025-06-29T14:20:46.473993",
     "exception": false,
     "start_time": "2025-06-29T14:20:39.021950",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import pypdf\n",
    "import torch\n",
    "import time\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a16f1615",
   "metadata": {
    "papermill": {
     "duration": 0.002335,
     "end_time": "2025-06-29T14:20:46.479569",
     "exception": false,
     "start_time": "2025-06-29T14:20:46.477234",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Learn Some pyTorch** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "87a9430d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T14:20:46.486852Z",
     "iopub.status.busy": "2025-06-29T14:20:46.486259Z",
     "iopub.status.idle": "2025-06-29T14:20:46.551900Z",
     "shell.execute_reply": "2025-06-29T14:20:46.550977Z"
    },
    "papermill": {
     "duration": 0.071115,
     "end_time": "2025-06-29T14:20:46.553472",
     "exception": false,
     "start_time": "2025-06-29T14:20:46.482357",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n",
      "tensor([1, 2, 3, 4, 5])\n"
     ]
    }
   ],
   "source": [
    "#Probability Tensor\n",
    "#0.9 is 1,0.1 is 0\n",
    "probabilities = torch.tensor([0.1,0.9])\n",
    "#draw 5 samples from multinomial distribution\n",
    "samples = torch.multinomial(probabilities, num_samples=10,replacement=True)\n",
    "print(samples)\n",
    "\n",
    "#Concat two tensors\n",
    "tensor = torch.tensor([1,2,3,4])\n",
    "out = torch.cat((tensor,torch.tensor([5])),dim=0)\n",
    "print(out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d886b77d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T14:20:46.559962Z",
     "iopub.status.busy": "2025-06-29T14:20:46.559644Z",
     "iopub.status.idle": "2025-06-29T14:20:46.626170Z",
     "shell.execute_reply": "2025-06-29T14:20:46.625303Z"
    },
    "papermill": {
     "duration": 0.071605,
     "end_time": "2025-06-29T14:20:46.627796",
     "exception": false,
     "start_time": "2025-06-29T14:20:46.556191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[1., 0., 0., 0., 0.],\n",
      "        [1., 1., 0., 0., 0.],\n",
      "        [1., 1., 1., 0., 0.],\n",
      "        [1., 1., 1., 1., 0.],\n",
      "        [1., 1., 1., 1., 1.]])\n",
      "tensor([[1., 1., 1., 1., 1.],\n",
      "        [0., 1., 1., 1., 1.],\n",
      "        [0., 0., 1., 1., 1.],\n",
      "        [0., 0., 0., 1., 1.],\n",
      "        [0., 0., 0., 0., 1.]])\n"
     ]
    }
   ],
   "source": [
    "#triangle tensor\n",
    "#lower\n",
    "out = torch.tril(torch.ones(5,5))\n",
    "print(out)\n",
    "\n",
    "#upper\n",
    "out = torch.triu(torch.ones(5,5))\n",
    "print(out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3c8fa280",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T14:20:46.634689Z",
     "iopub.status.busy": "2025-06-29T14:20:46.634085Z",
     "iopub.status.idle": "2025-06-29T14:20:46.648395Z",
     "shell.execute_reply": "2025-06-29T14:20:46.647369Z"
    },
    "papermill": {
     "duration": 0.019309,
     "end_time": "2025-06-29T14:20:46.649920",
     "exception": false,
     "start_time": "2025-06-29T14:20:46.630611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[[1., 1., 1., 1.],\n",
      "         [1., 1., 1., 1.],\n",
      "         [1., 1., 1., 1.]],\n",
      "\n",
      "        [[1., 1., 1., 1.],\n",
      "         [1., 1., 1., 1.],\n",
      "         [1., 1., 1., 1.]]])\n",
      "tensor([[[1., 1.],\n",
      "         [1., 1.],\n",
      "         [1., 1.]],\n",
      "\n",
      "        [[1., 1.],\n",
      "         [1., 1.],\n",
      "         [1., 1.]],\n",
      "\n",
      "        [[1., 1.],\n",
      "         [1., 1.],\n",
      "         [1., 1.]],\n",
      "\n",
      "        [[1., 1.],\n",
      "         [1., 1.],\n",
      "         [1., 1.]]])\n"
     ]
    }
   ],
   "source": [
    "#transpose the matrix\n",
    "input = torch.ones(2,3,4)\n",
    "print(input)\n",
    "output = input.transpose(0,2)\n",
    "print(output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a341a7af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T14:20:46.656669Z",
     "iopub.status.busy": "2025-06-29T14:20:46.656088Z",
     "iopub.status.idle": "2025-06-29T14:20:46.663368Z",
     "shell.execute_reply": "2025-06-29T14:20:46.662320Z"
    },
    "papermill": {
     "duration": 0.012188,
     "end_time": "2025-06-29T14:20:46.664874",
     "exception": false,
     "start_time": "2025-06-29T14:20:46.652686",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[1, 2, 3],\n",
      "        [4, 5, 6],\n",
      "        [7, 8, 9]])\n"
     ]
    }
   ],
   "source": [
    "#stack\n",
    "tensor1 = torch.tensor([1,2,3])\n",
    "tensor2 = torch.tensor([4,5,6])\n",
    "tensor3 = torch.tensor([7,8,9])\n",
    "stacked_tensor = torch.stack([tensor1,tensor2,tensor3])\n",
    "print(stacked_tensor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "18ab1956",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T14:20:46.671806Z",
     "iopub.status.busy": "2025-06-29T14:20:46.671199Z",
     "iopub.status.idle": "2025-06-29T14:20:46.700468Z",
     "shell.execute_reply": "2025-06-29T14:20:46.699390Z"
    },
    "papermill": {
     "duration": 0.034325,
     "end_time": "2025-06-29T14:20:46.702012",
     "exception": false,
     "start_time": "2025-06-29T14:20:46.667687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([ 1.4226, -0.9258,  0.0665,  4.8875], grad_fn=<ViewBackward0>)\n"
     ]
    }
   ],
   "source": [
    "#neural nets\n",
    "import torch.nn as nn\n",
    "sample = torch.tensor([10.0,10.0,10.0,5.0])\n",
    "linear = nn.Linear(4,4, bias=True)\n",
    "print(linear(sample))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "206b26aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T14:20:46.709165Z",
     "iopub.status.busy": "2025-06-29T14:20:46.708570Z",
     "iopub.status.idle": "2025-06-29T14:20:46.718700Z",
     "shell.execute_reply": "2025-06-29T14:20:46.717858Z"
    },
    "papermill": {
     "duration": 0.015062,
     "end_time": "2025-06-29T14:20:46.719982",
     "exception": false,
     "start_time": "2025-06-29T14:20:46.704920",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([0.0900, 0.2447, 0.6652])\n"
     ]
    }
   ],
   "source": [
    "#softmax function \n",
    "import torch.nn.functional as F\n",
    "\n",
    "tensor1 = torch.tensor([1.0,2.0,3.0])\n",
    "softmax_output = F.softmax(tensor1,dim=0)\n",
    "print(softmax_output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f329bb91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T14:20:46.727198Z",
     "iopub.status.busy": "2025-06-29T14:20:46.726432Z",
     "iopub.status.idle": "2025-06-29T14:20:46.745985Z",
     "shell.execute_reply": "2025-06-29T14:20:46.745148Z"
    },
    "papermill": {
     "duration": 0.024664,
     "end_time": "2025-06-29T14:20:46.747578",
     "exception": false,
     "start_time": "2025-06-29T14:20:46.722914",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 100])\n"
     ]
    }
   ],
   "source": [
    "#Embedding Layer\n",
    "vocab_size = 10000 #individual different words\n",
    "embedding_dim = 100 #characteristics\n",
    "embedding = torch.nn.Embedding(vocab_size,embedding_dim)\n",
    "input_indices = torch.LongTensor([1,5,3,2]) #asking for particular vocab dimensions\n",
    "embedded_output = embedding(input_indices)\n",
    "print(embedded_output.shape)\n",
    "#print(embedded_output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4ff1a77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T14:20:46.755439Z",
     "iopub.status.busy": "2025-06-29T14:20:46.755170Z",
     "iopub.status.idle": "2025-06-29T14:20:46.766234Z",
     "shell.execute_reply": "2025-06-29T14:20:46.765257Z"
    },
    "papermill": {
     "duration": 0.016832,
     "end_time": "2025-06-29T14:20:46.767643",
     "exception": false,
     "start_time": "2025-06-29T14:20:46.750811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[ 27,  30,  33],\n",
      "        [ 61,  68,  75],\n",
      "        [ 95, 106, 117]])\n",
      "tensor([[ 27,  30,  33],\n",
      "        [ 61,  68,  75],\n",
      "        [ 95, 106, 117]])\n"
     ]
    }
   ],
   "source": [
    "#Matrix Multiplications\n",
    "a = torch.tensor([[1,2],[3,4],[5,6]])\n",
    "b = torch.tensor([[7,8,9],[10,11,12]])\n",
    "print(a@b)\n",
    "print(torch.matmul(a,b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c30422d6",
   "metadata": {
    "papermill": {
     "duration": 0.002614,
     "end_time": "2025-06-29T14:20:46.773221",
     "exception": false,
     "start_time": "2025-06-29T14:20:46.770607",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 15.112906,
   "end_time": "2025-06-29T14:20:49.287274",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-29T14:20:34.174368",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
