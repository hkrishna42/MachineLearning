{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":12132069,"sourceType":"datasetVersion","datasetId":7640003},{"sourceId":12132184,"sourceType":"datasetVersion","datasetId":7640086}],"dockerImageVersionId":31040,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport pypdf\nimport torch\nimport time\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:11:19.085248Z","iopub.execute_input":"2025-06-12T05:11:19.085841Z","iopub.status.idle":"2025-06-12T05:11:19.101174Z","shell.execute_reply.started":"2025-06-12T05:11:19.085818Z","shell.execute_reply":"2025-06-12T05:11:19.100395Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/pdf-datset/33283-pdf.pdf\n","output_type":"stream"}],"execution_count":15},{"cell_type":"markdown","source":"1. **#Extracts text from a PDF file**","metadata":{}},{"cell_type":"code","source":"def extract_text_from_pdf(pdf_path):  \n    reader = pypdf.PdfReader(pdf_path)\n    text = \"\"\n    for page in reader.pages:\n        text += page.extract_text()\n    return text\n\npdf_file = \"/kaggle/input/pdf-datset/33283-pdf.pdf\" # Path to your PDF file\nextracted_text = extract_text_from_pdf(pdf_file)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:00:47.374906Z","iopub.execute_input":"2025-06-12T05:00:47.375191Z","iopub.status.idle":"2025-06-12T05:00:52.425972Z","shell.execute_reply.started":"2025-06-12T05:00:47.375172Z","shell.execute_reply":"2025-06-12T05:00:52.425387Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"print(len(extracted_text))\nprint(extracted_text[:200])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:00:52.427040Z","iopub.execute_input":"2025-06-12T05:00:52.427287Z","iopub.status.idle":"2025-06-12T05:00:52.431536Z","shell.execute_reply.started":"2025-06-12T05:00:52.427268Z","shell.execute_reply":"2025-06-12T05:00:52.430904Z"}},"outputs":[{"name":"stdout","text":"274898\nThe Project Gutenberg EBook of Calculus Made Easy, by Silvanus Thompson\nThis eBook is for the use of anyone anywhere in the United States and\nmost other parts of the world at no cost and with almost n\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"chars = sorted(set(extracted_text))\nprint(chars)\nprint(len(chars))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:00:53.162668Z","iopub.execute_input":"2025-06-12T05:00:53.163352Z","iopub.status.idle":"2025-06-12T05:00:53.170422Z","shell.execute_reply.started":"2025-06-12T05:00:53.163328Z","shell.execute_reply":"2025-06-12T05:00:53.169600Z"}},"outputs":[{"name":"stdout","text":"['\\x00', '\\x01', '\\x02', '\\x03', '\\x08', '\\t', '\\n', '\\x10', '\\x11', '\\x12', '\\x13', '\\x14', '\\x15', '\\x1a', '\\x1b', ' ', '!', '\"', '#', '$', '%', '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '=', '?', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', ']', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '}', '£', '¨', '±', '´', 'µ', '·', '×', 'æ', '÷', 'ǫ', '˙', 'α', 'β', 'θ', 'λ', 'π', 'σ', 'ω', 'ϕ', 'ϵ', '–', '—', '‘', '’', '“', '”', '′', '←', '→', '∂', '−', '∓', '√', '∞', '∴', '◦', '\\uf8f1', '\\uf8f2', '\\uf8f3', '\\uf8f4', '\\uf8fc', '\\uf8fd', '\\uf8fe']\n143\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"string_to_int = {ch:i for i,ch in enumerate(chars)}\nint_to_string = {i:ch for i,ch in enumerate(chars)}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:00:56.159557Z","iopub.execute_input":"2025-06-12T05:00:56.160242Z","iopub.status.idle":"2025-06-12T05:00:56.163979Z","shell.execute_reply.started":"2025-06-12T05:00:56.160216Z","shell.execute_reply":"2025-06-12T05:00:56.163187Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"encode = lambda s: [string_to_int[c] for c in s]\ndecode = lambda l: ''.join([int_to_string[i] for i in l])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:01:01.978555Z","iopub.execute_input":"2025-06-12T05:01:01.979346Z","iopub.status.idle":"2025-06-12T05:01:01.983353Z","shell.execute_reply.started":"2025-06-12T05:01:01.979313Z","shell.execute_reply":"2025-06-12T05:01:01.982602Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"encoded_hello = encode(\"Hello\")\nprint(encoded_hello)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:01:14.201336Z","iopub.execute_input":"2025-06-12T05:01:14.202161Z","iopub.status.idle":"2025-06-12T05:01:14.205957Z","shell.execute_reply.started":"2025-06-12T05:01:14.202129Z","shell.execute_reply":"2025-06-12T05:01:14.205153Z"}},"outputs":[{"name":"stdout","text":"[50, 76, 83, 83, 86]\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"decoded_hello = decode(encoded_hello)\nprint(decoded_hello)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:01:28.420805Z","iopub.execute_input":"2025-06-12T05:01:28.421584Z","iopub.status.idle":"2025-06-12T05:01:28.425427Z","shell.execute_reply.started":"2025-06-12T05:01:28.421559Z","shell.execute_reply":"2025-06-12T05:01:28.424658Z"}},"outputs":[{"name":"stdout","text":"Hello\n","output_type":"stream"}],"execution_count":10},{"cell_type":"markdown","source":"**Create Tensor out of the encoded pdf text**","metadata":{}},{"cell_type":"code","source":"data = torch.tensor(encode(extracted_text),dtype=torch.long)\nprint(data[:100])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:01:34.908407Z","iopub.execute_input":"2025-06-12T05:01:34.908651Z","iopub.status.idle":"2025-06-12T05:01:34.994926Z","shell.execute_reply.started":"2025-06-12T05:01:34.908633Z","shell.execute_reply":"2025-06-12T05:01:34.994228Z"}},"outputs":[{"name":"stdout","text":"tensor([62, 79, 76, 15, 58, 89, 86, 81, 76, 74, 91, 15, 49, 92, 91, 76, 85, 73,\n        76, 89, 78, 15, 47, 44, 86, 86, 82, 15, 86, 77, 15, 45, 72, 83, 74, 92,\n        83, 92, 90, 15, 55, 72, 75, 76, 15, 47, 72, 90, 96, 25, 15, 73, 96, 15,\n        61, 80, 83, 93, 72, 85, 92, 90, 15, 62, 79, 86, 84, 87, 90, 86, 85,  6,\n        62, 79, 80, 90, 15, 76, 44, 86, 86, 82, 15, 80, 90, 15, 77, 86, 89, 15,\n        91, 79, 76, 15, 92, 90, 76, 15, 86, 77])\n","output_type":"stream"}],"execution_count":11},{"cell_type":"markdown","source":"**Creating training & testing data split**","metadata":{}},{"cell_type":"code","source":"n = int(0.7*len(data))\ntrain_data = data[:n]\nval_data = data[n:]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:01:55.987406Z","iopub.execute_input":"2025-06-12T05:01:55.987942Z","iopub.status.idle":"2025-06-12T05:01:55.991677Z","shell.execute_reply.started":"2025-06-12T05:01:55.987918Z","shell.execute_reply":"2025-06-12T05:01:55.990892Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"#block_size - creates a tiny tensor\nblock_size = 10\n\nx = train_data[:block_size]\ny = train_data[1:block_size+1]\n#more like a if sequence of input is then the output is\nfor t in range(block_size):\n    context = x[:t+1]\n    target = y[t]\n    print('when input is',context,'target is',target)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:02:04.175260Z","iopub.execute_input":"2025-06-12T05:02:04.175951Z","iopub.status.idle":"2025-06-12T05:02:04.184073Z","shell.execute_reply.started":"2025-06-12T05:02:04.175928Z","shell.execute_reply":"2025-06-12T05:02:04.183424Z"}},"outputs":[{"name":"stdout","text":"when input is tensor([62]) target is tensor(79)\nwhen input is tensor([62, 79]) target is tensor(76)\nwhen input is tensor([62, 79, 76]) target is tensor(15)\nwhen input is tensor([62, 79, 76, 15]) target is tensor(58)\nwhen input is tensor([62, 79, 76, 15, 58]) target is tensor(89)\nwhen input is tensor([62, 79, 76, 15, 58, 89]) target is tensor(86)\nwhen input is tensor([62, 79, 76, 15, 58, 89, 86]) target is tensor(81)\nwhen input is tensor([62, 79, 76, 15, 58, 89, 86, 81]) target is tensor(76)\nwhen input is tensor([62, 79, 76, 15, 58, 89, 86, 81, 76]) target is tensor(74)\nwhen input is tensor([62, 79, 76, 15, 58, 89, 86, 81, 76, 74]) target is tensor(91)\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"#check for the GPU access\nif torch.cuda.is_available():\n    device = 'cuda'\nelse:\n    device = 'cpu'\nprint(device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:02:05.427389Z","iopub.execute_input":"2025-06-12T05:02:05.427638Z","iopub.status.idle":"2025-06-12T05:02:05.522561Z","shell.execute_reply.started":"2025-06-12T05:02:05.427619Z","shell.execute_reply":"2025-06-12T05:02:05.521780Z"}},"outputs":[{"name":"stdout","text":"cuda\n","output_type":"stream"}],"execution_count":14},{"cell_type":"markdown","source":"# **Learn Some pyTorch** ","metadata":{}},{"cell_type":"code","source":"\n#Probability Tensor\n#0.9 is 1,0.1 is 0\nprobabilities = torch.tensor([0.1,0.9])\n#draw 5 samples from multinomial distribution\nsamples = torch.multinomial(probabilities, num_samples=10,replacement=True)\nprint(samples)\n\n#Concat two tensors\ntensor = torch.tensor([1,2,3,4])\nout = torch.cat((tensor,torch.tensor([5])),dim=0)\nprint(out)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:25:51.443672Z","iopub.execute_input":"2025-06-12T05:25:51.444026Z","iopub.status.idle":"2025-06-12T05:25:51.450094Z","shell.execute_reply.started":"2025-06-12T05:25:51.444003Z","shell.execute_reply":"2025-06-12T05:25:51.449351Z"}},"outputs":[{"name":"stdout","text":"tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\ntensor([1, 2, 3, 4, 5])\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"#triangle tensor\n#lower\nout = torch.tril(torch.ones(5,5))\nprint(out)\n\n#upper\nout = torch.triu(torch.ones(5,5))\nprint(out)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:30:00.416558Z","iopub.execute_input":"2025-06-12T05:30:00.417147Z","iopub.status.idle":"2025-06-12T05:30:00.422878Z","shell.execute_reply.started":"2025-06-12T05:30:00.417120Z","shell.execute_reply":"2025-06-12T05:30:00.422280Z"}},"outputs":[{"name":"stdout","text":"tensor([[1., 0., 0., 0., 0.],\n        [1., 1., 0., 0., 0.],\n        [1., 1., 1., 0., 0.],\n        [1., 1., 1., 1., 0.],\n        [1., 1., 1., 1., 1.]])\ntensor([[1., 1., 1., 1., 1.],\n        [0., 1., 1., 1., 1.],\n        [0., 0., 1., 1., 1.],\n        [0., 0., 0., 1., 1.],\n        [0., 0., 0., 0., 1.]])\n","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"#transpose the matrix\ninput = torch.ones(2,3,4)\nprint(input)\noutput = input.transpose(0,2)\nprint(output)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:40:35.428325Z","iopub.execute_input":"2025-06-12T05:40:35.428990Z","iopub.status.idle":"2025-06-12T05:40:35.435085Z","shell.execute_reply.started":"2025-06-12T05:40:35.428967Z","shell.execute_reply":"2025-06-12T05:40:35.434341Z"}},"outputs":[{"name":"stdout","text":"tensor([[[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]],\n\n        [[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]]])\ntensor([[[1., 1., 1., 1.],\n         [1., 1., 1., 1.]],\n\n        [[1., 1., 1., 1.],\n         [1., 1., 1., 1.]],\n\n        [[1., 1., 1., 1.],\n         [1., 1., 1., 1.]]])\n","output_type":"stream"}],"execution_count":42},{"cell_type":"code","source":"#stack\ntensor1 = torch.tensor([1,2,3])\ntensor2 = torch.tensor([4,5,6])\ntensor3 = torch.tensor([7,8,9])\nstacked_tensor = torch.stack([tensor1,tensor2,tensor3])\nprint(stacked_tensor)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:44:39.335118Z","iopub.execute_input":"2025-06-12T05:44:39.335650Z","iopub.status.idle":"2025-06-12T05:44:39.340761Z","shell.execute_reply.started":"2025-06-12T05:44:39.335619Z","shell.execute_reply":"2025-06-12T05:44:39.340224Z"}},"outputs":[{"name":"stdout","text":"tensor([[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]])\n","output_type":"stream"}],"execution_count":44},{"cell_type":"code","source":"#neural nets\nimport torch.nn as nn\nsample = torch.tensor([10.0,10.0,10.0,5.0])\nlinear = nn.Linear(4,4, bias=True)\nprint(linear(sample))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T05:54:00.515753Z","iopub.execute_input":"2025-06-12T05:54:00.516407Z","iopub.status.idle":"2025-06-12T05:54:00.522072Z","shell.execute_reply.started":"2025-06-12T05:54:00.516382Z","shell.execute_reply":"2025-06-12T05:54:00.521462Z"}},"outputs":[{"name":"stdout","text":"tensor([-2.6670,  8.4893,  0.0431,  2.3667], grad_fn=<ViewBackward0>)\n","output_type":"stream"}],"execution_count":58},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}